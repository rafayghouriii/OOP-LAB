#include <iostream>
using namespace std;

class Matrix {
private:
    int rows;
    int cols;
    int** elements;

public:
    Matrix(int rows, int cols) {
        this->rows = rows;
        this->cols = cols;
        elements = new int*[rows];
        for (int i = 0; i < rows; i++) {
            elements[i] = new int[cols];
        }
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                elements[i][j] = 0;
            }
        }
    }

    ~Matrix() {
        for (int i = 0; i < rows; i++) {
            delete[] elements[i];
        }
        delete[] elements;
    }

    int getRows() {
        return rows;
    }

    int getCols() {
        return cols;
    }

    void setElement(int i, int j, int value) {
        if (i >= 0 && i < rows && j >= 0 && j < cols) {
            elements[i][j] = value;
        }
    }

    int getElement(int i, int j) {
        if (i >= 0 && i < rows && j >= 0 && j < cols) {
            return elements[i][j];
        }
        return -1;
    }

    Matrix add(Matrix &other) {
        if (this->rows != other.getRows() || this->cols != other.getCols()) {
            cout << "Matrices cannot be added!" << endl;
            return Matrix(0, 0);
        }
        Matrix result(this->rows, this->cols);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result.setElement(i, j, this->elements[i][j] + other.getElement(i, j));
            }
        }
        return result;
    }

    Matrix multiply(Matrix &other) {
        if (this->cols != other.getRows()) {
            cout << "Matrices cannot be multiplied!" << endl;
            return Matrix(0, 0);
        }
        Matrix result(this->rows, other.getCols());
        for (int i = 0; i < this->rows; i++) {
            for (int j = 0; j < other.getCols(); j++) {
                int sum = 0;
                for (int k = 0; k < this->cols; k++) {
                    sum += this->elements[i][k] * other.getElement(k, j);
                }
                result.setElement(i, j, sum);
            }
        }
        return result;
    }

    void display() {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                cout << elements[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Matrix mat1(2, 3);
    Matrix mat2(2, 3);
    mat1.setElement(0, 0, 1);
    mat1.setElement(0, 1, 2);
    mat1.setElement(0, 2, 3);
    mat1.setElement(1, 0, 4);
    mat1.setElement(1, 1, 5);
    mat1.setElement(1, 2, 6);
    mat2.setElement(0, 0, 7);
    mat2.setElement(0, 1, 8);
    mat2.setElement(0, 2, 9);
    mat2.setElement(1, 0, 10);
    mat2.setElement(1, 1, 11);
    mat2.setElement(1, 2, 12);
    cout << "Matrix 1:" << endl;
    mat1.display();
    cout << "\nMatrix 2:" << endl;
    mat2.display();
    Matrix sum = mat1.add(mat2);
    cout << "\nSum of Matrices:" << endl;
    sum.display();
    Matrix product = mat1.multiply(mat2);
    cout << "\nProduct of Matrices:" << endl;
    product.display();
    return 0;
}
