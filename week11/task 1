#include <iostream>
#include <any>
#include <exception>
#include <string>

// Custom Exception
class BadTypeException : public std::exception {
public:
    const char* what() const noexcept override {
        return "BadTypeException: Type mismatch during retrieval";
    }
};

// TypeSafeContainer class using std::any
class TypeSafeContainer {
private:
    std::any value;

public:
    TypeSafeContainer() = default;

    // Store any type
    template<typename T>
    void store(const T& val) {
        value = val;
    }

    // Retrieve the stored value if the type matches
    template<typename T>
    T get() const {
        if (!value.has_value()) {
            throw BadTypeException();
        }

        try {
            return std::any_cast<T>(value);
        } catch (const std::bad_any_cast&) {
            throw BadTypeException();
        }
    }
};

// Main function demonstrating usage
int main() {
    TypeSafeContainer container;

    container.store<std::string>("Hello, world!");

    try {
        std::string msg = container.get<std::string>();
        std::cout << "Retrieved: " << msg << std::endl;

        // Attempt to retrieve with wrong type
        int num = container.get<int>();  // Will throw
    } catch (const BadTypeException& e) {
        std::cerr << e.what() << std::endl;
    }

    return 0;
}
