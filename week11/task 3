#include <iostream>
#include <exception>
using namespace std;

// Custom exception
class ArrayIndexOutOfBounds : public exception {
public:
    const char* what() const noexcept override {
        return "ArrayIndexOutOfBounds: Invalid index accessed.";
    }
};

// Template class SafeArray
template<typename T>
class SafeArray {
private:
    T* arr;
    int size;

public:
    // Constructor
    SafeArray(int s) {
        if (s <= 0) throw invalid_argument("Size must be positive");
        size = s;
        arr = new T[size];
    }

    // Destructor
    ~SafeArray() {
        delete[] arr;
    }

    // Overloaded [] operator with bounds checking
    T& operator[](int index) {
        if (index < 0 || index >= size)
            throw ArrayIndexOutOfBounds();
        return arr[index];
    }

    // Get array size
    int getSize() const {
        return size;
    }
};

// Main function to demonstrate usage
int main() {
    try {
        SafeArray<int> numbers(5);

        // Fill array
        for (int i = 0; i < numbers.getSize(); ++i) {
            numbers[i] = i * 10;
        }

        // Print array
        cout << "Array contents: ";
        for (int i = 0; i < numbers.getSize(); ++i) {
            cout << numbers[i] << " ";
        }
        cout << endl;

        // Trigger exception by accessing invalid index
        cout << "Accessing out-of-bounds index..." << endl;
        cout << numbers[10] << endl; // This should throw

    } catch (const ArrayIndexOutOfBounds& e) {
        cerr << e.what() << endl;
    } catch (const exception& e) {
        cerr << "Other error: " << e.what() << endl;
    }

    return 0;
}
