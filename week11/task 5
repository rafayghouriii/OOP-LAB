#include <iostream>
#include <vector>
#include <exception>
using namespace std;

// Custom exception for stack underflow
class StackUnderflowException : public exception {
public:
    const char* what() const noexcept override {
        return "StackUnderflowException: Stack is empty.";
    }
};

// Stack class template
template<typename T>
class Stack {
private:
    vector<T> data;

public:
    // Push an element
    void push(const T& value) {
        data.push_back(value);
    }

    // Pop the top element
    void pop() {
        if (data.empty())
            throw StackUnderflowException();
        data.pop_back();
    }

    // Get the top element
    T top() const {
        if (data.empty())
            throw StackUnderflowException();
        return data.back();
    }

    // Check if stack is empty
    bool isEmpty() const {
        return data.empty();
    }

    // Get current size
    size_t size() const {
        return data.size();
    }
};

// Main function to demonstrate stack usage
int main() {
    Stack<int> s;

    try {
        cout << "Pushing elements onto the stack...\n";
        s.push(10);
        s.push(20);
        s.push(30);

        cout << "Top element: " << s.top() << endl;

        cout << "Popping elements...\n";
        s.pop();
        cout << "Top element after pop: " << s.top() << endl;
        s.pop();
        s.pop();

        // Trigger underflow
        s.pop();  // Will throw

    } catch (const StackUnderflowException& e) {
        cerr << e.what() << endl;
    } catch (const exception& e) {
        cerr << "Unexpected error: " << e.what() << endl;
    }

    return 0;
}
