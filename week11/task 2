#include <iostream>
#include <vector>
#include <stdexcept>
using namespace std;

// Custom exception for dimension mismatch
class DimensionMismatchException : public exception {
public:
    const char* what() const noexcept override {
        return "DimensionMismatchException: Matrix dimensions do not match.";
    }
};

// Matrix template class
template<typename T>
class Matrix {
private:
    size_t rows, cols;
    vector<vector<T>> data;

public:
    // Constructor
    Matrix(size_t r, size_t c, T defaultValue = T()) : rows(r), cols(c), data(r, vector<T>(c, defaultValue)) {}

    // Element access with bounds checking
    T& at(size_t r, size_t c) {
        if (r >= rows || c >= cols)
            throw out_of_range("Matrix index out of bounds");
        return data[r][c];
    }

    const T& at(size_t r, size_t c) const {
        if (r >= rows || c >= cols)
            throw out_of_range("Matrix index out of bounds");
        return data[r][c];
    }

    // Addition
    Matrix<T> operator+(const Matrix<T>& other) const {
        if (rows != other.rows || cols != other.cols)
            throw DimensionMismatchException();

        Matrix<T> result(rows, cols);
        for (size_t i = 0; i < rows; ++i)
            for (size_t j = 0; j < cols; ++j)
                result.data[i][j] = data[i][j] + other.data[i][j];

        return result;
    }

    // Multiplication
    Matrix<T> operator*(const Matrix<T>& other) const {
        if (cols != other.rows)
            throw DimensionMismatchException();

        Matrix<T> result(rows, other.cols, T());
        for (size_t i = 0; i < rows; ++i)
            for (size_t j = 0; j < other.cols; ++j)
                for (size_t k = 0; k < cols; ++k)
                    result.data[i][j] += data[i][k] * other.data[k][j];

        return result;
    }

    // Print matrix (for debugging)
    void print() const {
        for (const auto& row : data) {
            for (const auto& val : row)
                cout << val << " ";
            cout << endl;
        }
    }

    // Getters
    size_t rowCount() const { return rows; }
    size_t colCount() const { return cols; }
};
int main() {
    try {
        Matrix<int> A(2, 3);
        Matrix<int> B(2, 3);
        Matrix<int> C(3, 2);

        // Fill matrices
        A.at(0, 0) = 1; A.at(0, 1) = 2; A.at(0, 2) = 3;
        A.at(1, 0) = 4; A.at(1, 1) = 5; A.at(1, 2) = 6;

        B.at(0, 0) = 7; B.at(0, 1) = 8; B.at(0, 2) = 9;
        B.at(1, 0) = 1; B.at(1, 1) = 2; B.at(1, 2) = 3;

        C.at(0, 0) = 1; C.at(1, 0) = 2; C.at(2, 0) = 3;
        C.at(0, 1) = 4; C.at(1, 1) = 5; C.at(2, 1) = 6;

        cout << "A + B:\n";
        Matrix<int> sum = A + B;
        sum.print();

        cout << "\nA * C:\n";
        Matrix<int> product = A * C;
        product.print();

        // Uncomment this to test bounds checking
        // int x = A.at(10, 0);

    } catch (const exception& e) {
        cerr << e.what() << endl;
    }

    return 0;
}
